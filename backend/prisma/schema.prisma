generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model clocks {
  idClock     Int       @id @default(autoincrement())
  userId      Int
  clockIn     DateTime
  clockOut    DateTime?
  hoursWorked Float?
  users       users     @relation(fields: [userId], references: [idUser], map: "Clocks_userId_fkey")

  @@index([userId], map: "Clocks_userId_fkey")
}

model plannings {
  idPlanning Int      @id @default(autoincrement())
  userId     Int
  date       DateTime
  startTime  DateTime
  endTime    DateTime
  users      users    @relation(fields: [userId], references: [idUser], map: "Plannings_userId_fkey")

  @@index([userId], map: "Plannings_userId_fkey")
}

model reports {
  idReport  Int      @id @default(autoincrement())
  kpi       String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  userId    Int
  teamId    Int
  teams     teams    @relation(fields: [teamId], references: [idTeam], map: "Reports_teamId_fkey")
  users     users    @relation(fields: [userId], references: [idUser], map: "Reports_userId_fkey")

  @@index([teamId], map: "Reports_teamId_fkey")
  @@index([userId], map: "Reports_userId_fkey")
}

model roles {
  idRole    Int         @id @default(autoincrement())
  name      String      @unique(map: "Roles_name_key")
  userroles userroles[]
}

model teams {
  idTeam      Int        @id @default(autoincrement())
  name        String     @unique(map: "Teams_name_key")
  description String?
  managerId   Int
  reports     reports[]
  users       users      @relation(fields: [managerId], references: [idUser], map: "Teams_managerId_fkey")
  teamuser    teamuser[]

  @@index([managerId], map: "Teams_managerId_fkey")
}

model teamuser {
  id     Int   @id @default(autoincrement())
  teamId Int
  userId Int
  teams  teams @relation(fields: [teamId], references: [idTeam], map: "TeamUser_teamId_fkey")
  users  users @relation(fields: [userId], references: [idUser], map: "TeamUser_userId_fkey")

  @@unique([teamId, userId], map: "TeamUser_teamId_userId_key")
  @@index([userId], map: "TeamUser_userId_fkey")
}

model userroles {
  idUserRole Int   @id @default(autoincrement())
  userId     Int
  roleId     Int
  roles      roles @relation(fields: [roleId], references: [idRole], map: "UserRoles_roleId_fkey")
  users      users @relation(fields: [userId], references: [idUser], map: "UserRoles_userId_fkey")

  @@unique([userId, roleId], map: "UserRoles_userId_roleId_key")
  @@index([roleId], map: "UserRoles_roleId_fkey")
}

model users {
  idUser    Int         @id @default(autoincrement())
  email     String      @unique(map: "Users_email_key")
  firstname String
  lastname  String
  password  String
  phone     Int
  profile   String?
  clocks    clocks[]
  plannings plannings[]
  reports   reports[]
  teams     teams[]
  teamuser  teamuser[]
  userroles userroles[]
  vacations vacations[]
}

model vacations {
  idVacation Int      @id @default(autoincrement())
  userId     Int
  startDate  DateTime
  endDate    DateTime
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  users      users    @relation(fields: [userId], references: [idUser], map: "Vacations_userId_fkey")

  @@index([userId], map: "Vacations_userId_fkey")
}
